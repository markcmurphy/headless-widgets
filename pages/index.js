import Head from 'next/head';
import Image from 'next/image';
import styles from '../styles/Home.module.css';
import Modal from '../components/Modal';
import React, { useEffect, useRef, useState } from 'react';

import {
  ApolloClient,
  createHttpLink,
  InMemoryCache,
  gql,
} from '@apollo/client';
import { setContext } from '@apollo/client/link/context';

export default function Home({ widgets }) {
  const [showModal, setShowModal] = useState(false);
  const [selectedWidget, setSelectedWidget] = useState(null);
  console.log(selectedWidget);

  const truncate = (str) => {
    return str.length > 150 ? str.substring(0, 75) + '...' : str;
  };

  const expandModal = (widget) => {
    setSelectedWidget(widget);
    setShowModal(true);
  };

  const closeModal = () => {
    setSelectedWidget(null);
    setShowModal(false);
  };

  function returnHTML(widget) {
    return { __html: widget.html };
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Headless Widgets</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      {
        <main className={styles.main}>
          <div className={styles.grid}>
            {widgets.map((widget, index) => {
              return (
                <div key={index}>
                  <button onClick={() => expandModal(widget)}>
                    {widget.name}
                  </button>
                  <Modal onClose={() => closeModal()} show={showModal}>
                    <h3>Region: {selectedWidget && selectedWidget.name}</h3>

                    <div
                      dangerouslySetInnerHTML={
                        selectedWidget ? returnHTML(selectedWidget) : null
                      }
                    ></div>
                    <p
                      style={{
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                      }}
                    >
                      {selectedWidget ? truncate(selectedWidget.html) : null}
                    </p>
                  </Modal>
                </div>
              );
            })}
          </div>
        </main>
      }

      <footer className={styles.footer}></footer>
    </div>
  );
}

export async function getStaticProps() {
  const httpLink = createHttpLink({
    uri: 'https://store-29iql3rwa6.mybigcommerce.com/graphql',
  });

  const authLink = setContext((_, { headers }) => {
    // get the authentication token from local storage if it exists
    // return the headers to the context so httpLink can read them
    return {
      headers: {
        ...headers,
        authorization: `Bearer ${process.env.REACT_APP_BIGCOMMERCE_TOKEN}`,
      },
    };
  });
  const client = new ApolloClient({
    link: authLink.concat(httpLink),
    cache: new InMemoryCache(),
  });

  const { data } = await client.query({
    query: gql`
      query fetchWidgets {
        site {
          content {
            renderedRegionsByPageType(pageType: HOME) {
              regions {
                name
                html
              }
            }
          }
        }
      }
    `,
  });
  return {
    props: {
      widgets: data.site.content.renderedRegionsByPageType.regions,
    },
  };
}
